// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base User Model
model User {
  id                      String                 @id @default(cuid())
  name                    String?
  firstName               String?
  lastName                String?
  email                   String                 @unique
  username                String                 @unique
  password                String?
  img                     String?
  role                    Role                   @default(VISITOR)
  active                  Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  twoFactorEnabled        Boolean?               @default(false)
  twoFactorCode           String?
  twoFactorCodeExpires    DateTime?
  passwordResetToken      String?                @unique
  passwordResetExpires    DateTime?
  sessions                ChatroomSession[]      @relation("HostToSessions")
  sessionParticipations   SessionParticipant[]   @relation("ParticipantToSessions")
  messages                ChatroomMessage[]
  teacher                 Teacher?
  student                 Student?
  parent                  Parent?
  admin                   Admin?
}

// User Roles
enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

// Role-specific Models
model Admin {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String  @unique
  name    String
  surname String
  phone   String?
  address String?
  img     String?
}

model Teacher {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique
  name        String
  surname     String
  phone       String?
  address     String?
  img         String?
  birthday    DateTime?
  sex         UserSex?
  bloodType   String?
  subjects    Subject[] @relation("TeacherSubjects")
  lessons     Lesson[]
  constraints TeacherConstraint[]
  assignments TeacherAssignment[]
}

model Student {
  id                 String             @id @default(cuid())
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String             @unique
  name               String
  surname            String
  phone              String?
  address            String
  img                String?
  birthday           DateTime
  sex                UserSex
  bloodType          String
  class              Class?             @relation(fields: [classId], references: [id], onDelete: SetNull)
  classId            Int?
  grade              Grade?             @relation(fields: [gradeId], references: [id], onDelete: SetNull)
  gradeId            Int?
  parent             Parent?            @relation(fields: [parentId], references: [id], onDelete: SetNull)
  parentId           String?
  attendances        Attendance[]
  results            Result[]
  optionalSubjects   OptionalSubject[]  @relation("StudentOptionalSubjects")
}

model Parent {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String    @unique
  name     String
  surname  String
  phone    String?
  address  String?
  img      String?
  students Student[]
}

// School Structure
model School {
  id   Int    @id @default(autoincrement())
  name String
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Student[]
  optionalSubjects OptionalSubject[]
}

model Class {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  abbreviation     String?
  capacity         Int
  grade            Grade              @relation(fields: [gradeId], references: [id])
  gradeId          Int
  students         Student[]
  lessons          Lesson[]
  events           Event[]
  announcements    Announcement[]
  classAssignments ClassAssignment[]
}

model Subject {
  id            Int                 @id @default(autoincrement())
  name          String              @unique
  weeklyHours   Int?
  coefficient   Int?
  teachers      Teacher[]           @relation("TeacherSubjects")
  lessons       Lesson[]
  requirements  LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]
}

model OptionalSubject {
  id          Int       @id @default(autoincrement())
  name        String
  grade       Grade     @relation(fields: [gradeId], references: [id])
  gradeId     Int
  students    Student[] @relation("StudentOptionalSubjects")
  lessons     Lesson[]
}

model Classroom {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  abbreviation String?
  capacity     Int
  building     String?
  lessons      Lesson[]
}

// Schedule & Academic
model Lesson {
  id                Int       @id @default(autoincrement())
  name              String
  day               Day
  startTime         DateTime
  endTime           DateTime
  subject           Subject?   @relation(fields: [subjectId], references: [id])
  subjectId         Int?
  optionalSubject   OptionalSubject? @relation(fields: [optionalSubjectId], references: [id])
  optionalSubjectId Int?
  class             Class     @relation(fields: [classId], references: [id])
  classId           Int
  teacher           Teacher   @relation(fields: [teacherId], references: [id])
  teacherId         String
  classroom         Classroom? @relation(fields: [classroomId], references: [id])
  classroomId       Int?
  exams             Exam[]
  assignments       Assignment[]
  attendances       Attendance[]
  scheduleDraft     ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id])
  scheduleDraftId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  student      Student     @relation(fields: [studentId], references: [id])
  studentId    String
  exam         Exam?       @relation(fields: [examId], references: [id])
  examId       Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
}

// School Life
model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  class       Class?   @relation(fields: [classId], references: [id])
  classId     Int?
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  class       Class?   @relation(fields: [classId], references: [id])
  classId     Int?
}


// --- SCHEDULER MODELS ---

model ScheduleDraft {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  user                 User                   @relation(fields: [userId], references: [id])
  userId               String
  isActive             Boolean                @default(false)
  schoolConfig         Json?
  classes              Json?
  subjects             Json?
  teachers             Json?
  classrooms           Json?
  grades               Json?
  lessons              Lesson[]
  lessonRequirements   LessonRequirement[]
  teacherConstraints   TeacherConstraint[]
  subjectRequirements  SubjectRequirement[]
  teacherAssignments   TeacherAssignment[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model LessonRequirement {
  id              Int            @id @default(autoincrement())
  classId         Int
  subjectId       Int
  hours           Int
  scheduleDraft   ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id])
  scheduleDraftId String
}

model TeacherConstraint {
  id              Int            @id @default(cuid())
  teacher         Teacher        @relation(fields: [teacherId], references: [id])
  teacherId       String
  day             Day
  startTime       String
  endTime         String
  description     String?
  scheduleDraft   ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id])
  scheduleDraftId String
}

enum TimePreference {
  AM
  PM
  ANY
}

model SubjectRequirement {
  id               Int             @id @default(autoincrement())
  subject          Subject         @relation(fields: [subjectId], references: [id])
  subjectId        Int
  allowedRoomIds   Json?
  timePreference   TimePreference  @default(ANY)
  scheduleDraft    ScheduleDraft   @relation(fields: [scheduleDraftId], references: [id])
  scheduleDraftId  String
}

model TeacherAssignment {
  id                Int                @id @default(autoincrement())
  teacher           Teacher            @relation(fields: [teacherId], references: [id])
  teacherId         String
  subject           Subject            @relation(fields: [subjectId], references: [id])
  subjectId         Int
  classAssignments  ClassAssignment[]
  scheduleDraft     ScheduleDraft      @relation(fields: [scheduleDraftId], references: [id])
  scheduleDraftId   String
}

model ClassAssignment {
  id                   Int               @id @default(autoincrement())
  teacherAssignment    TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id])
  teacherAssignmentId  Int
  class                Class             @relation(fields: [classId], references: [id])
  classId              Int
}

// --- CHATROOM MODELS ---

enum SessionType {
  CLASS
  MEETING
}

model ChatroomSession {
  id           String               @id @default(cuid())
  title        String
  type         SessionType
  startTime    DateTime             @default(now())
  endTime      DateTime?
  status       String               @default("ACTIVE") // e.g., ACTIVE, ENDED
  host         User?                @relation("HostToSessions", fields: [hostId], references: [id])
  hostId       String?
  classId      Int?
  participants SessionParticipant[]
  messages     ChatroomMessage[]
  polls        Poll[]
  quizzes      Quiz[]
  description  String?
}

model SessionParticipant {
  id                String          @id @default(cuid())
  user              User            @relation("ParticipantToSessions", fields: [userId], references: [id])
  userId            String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  chatroomSessionId String
  joinedAt          DateTime        @default(now())
  leftAt            DateTime?

  @@unique([userId, chatroomSessionId])
}

model ChatroomMessage {
  id                String          @id @default(cuid())
  content           String
  author            User            @relation(fields: [authorId], references: [id])
  authorId          String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  chatroomSessionId String
  createdAt         DateTime        @default(now())
}

model Poll {
  id          String           @id @default(cuid())
  question    String
  options     Json // { option: string, votes: number }[]
  isActive    Boolean          @default(true)
  session     ChatroomSession  @relation(fields: [sessionId], references: [id])
  sessionId   String
  createdAt   DateTime         @default(now())
}

model Quiz {
  id                   String          @id @default(cuid())
  title                String
  questions            Json // { question: string, options: string[], correctAnswerIndex: number }[]
  isActive             Boolean         @default(true)
  currentQuestionIndex Int             @default(0)
  session              ChatroomSession @relation(fields: [sessionId], references: [id])
  sessionId            String
  answers              QuizAnswer[]
}

model QuizAnswer {
  id             String @id @default(cuid())
  quiz           Quiz   @relation(fields: [quizId], references: [id])
  quizId         String
  questionIndex  Int
  answerIndex    Int
  studentId      String
  isCorrect      Boolean
}
