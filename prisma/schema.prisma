// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model School {
  id              Int      @id @default(autoincrement())
  name            String
  startTime       String?
  endTime         String?
  schoolDays      Json?
  sessionDuration Int?
  sessionInterval Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id                    String                @id @default(cuid())
  name                  String
  firstName             String?
  lastName              String?
  email                 String                @unique
  username              String                @unique
  password              String?
  img                   String?
  role                  Role
  active                Boolean               @default(false)
  twoFactorEnabled      Boolean?              @default(false)
  twoFactorCode         String?
  twoFactorCodeExpires  DateTime?
  passwordResetToken    String?               @unique
  passwordResetExpires  DateTime?
  admin                 Admin?
  teacher               Teacher?
  student               Student?
  parent                Parent?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  sessions              SessionParticipant[]
  sentMessages          Message[]             @relation("sentMessages")
  receivedMessages      Message[]             @relation("receivedMessages")
  authoredChatMessages  ChatroomMessage[]
  sessionParticipations SessionParticipant[]
}

model Admin {
  id      String  @id @default(cuid())
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String
  surname String
  phone   String?
}

model Teacher {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  sex       UserSex?
  birthday  DateTime?
  bloodType String?
  subjects  Subject[]
  lessons   Lesson[]
}

model Student {
  id               String            @id @default(cuid())
  userId           String            @unique
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  surname          String
  phone            String?
  address          String
  img              String?
  birthday         DateTime
  sex              UserSex
  bloodType        String?
  classId          Int?
  class            Class?            @relation(fields: [classId], references: [id], onDelete: SetNull)
  gradeId          Int?
  grade            Grade?            @relation(fields: [gradeId], references: [id], onDelete: SetNull)
  parentId         String?
  parent           Parent?           @relation(fields: [parentId], references: [id], onDelete: SetNull)
  attendances      Attendance[]
  results          Result[]
  optionalSubjects OptionalSubject[] @relation("StudentOptionalSubjects")
}

model Parent {
  id      String    @id @default(cuid())
  userId  String?   @unique
  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String
  surname String
  phone   String?
  address String?
  img     String?
  Student Student[]
}

model Grade {
  id               Int               @id @default(autoincrement())
  level            Int               @unique
  classes          Class[]
  students         Student[]
  optionalSubjects OptionalSubject[]
}

model Class {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  capacity         Int
  gradeId          Int
  grade            Grade              @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  abbreviation     String?
  superviseurId    String?
  students         Student[]
  lessons          Lesson[]
  announcements    Announcement[]
  events           Event[]
  classAssignments ClassAssignment[]
}

model Subject {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  weeklyHours        Int
  coefficient        Int
  teachers           Teacher[]
  lessons            Lesson[]
  lessonRequirements LessonRequirement[]
  subjectRequirement SubjectRequirement[]
}

model OptionalSubject {
  id         Int       @id @default(autoincrement())
  name       String
  gradeId    Int
  grade      Grade     @relation(fields: [gradeId], references: [id])
  students   Student[] @relation("StudentOptionalSubjects")
  lessons    Lesson[]
}

model Classroom {
  id           Int      @id @default(autoincrement())
  name         String
  abbreviation String?
  capacity     Int
  building     String?
  Lesson       Lesson[]
}

model Lesson {
  id                Int                 @id @default(autoincrement())
  name              String
  day               Day
  startTime         DateTime
  endTime           DateTime
  subjectId         Int?
  subject           Subject?            @relation(fields: [subjectId], references: [id])
  optionalSubjectId Int?
  optionalSubject   OptionalSubject?    @relation(fields: [optionalSubjectId], references: [id])
  classId           Int
  class             Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacherId         String
  teacher           Teacher             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroomId       Int?
  classroom         Classroom?          @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  attendances       Attendance[]
  exams             Exam[]
  assignments       Assignment[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  scheduleDraftId   String?
  scheduleDraft     ScheduleDraft?      @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   String
  sender     User     @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

// Wizard Models
model ScheduleDraft {
  id                  String               @id @default(cuid())
  userId              String
  name                String
  description         String?
  isActive            Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  schoolConfig        Json?
  classes             Json?
  subjects            Json?
  teachers            Json?
  classrooms          Json?
  grades              Json?
  lessons             Lesson[]
  lessonRequirements  LessonRequirement[]
  teacherConstraints  TeacherConstraint[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments  TeacherAssignment[]
}

model LessonRequirement {
  id              Int            @id @default(autoincrement())
  scheduleDraftId String?
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  classId         Int
  subjectId       Int
  hours           Int

  @@unique([scheduleDraftId, classId, subjectId])
}

model TeacherConstraint {
  id              String         @id @default(cuid())
  scheduleDraftId String?
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  teacherId       String
  day             Day
  startTime       String // HH:mm
  endTime         String // HH:mm
  description     String?
}

model SubjectRequirement {
  id               Int            @id @default(autoincrement())
  scheduleDraftId  String?
  scheduleDraft    ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  subjectId        Int            @unique
  subject          Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  allowedRoomIds   Int[]
  timePreference   TimePreference
}

model TeacherAssignment {
  id               Int               @id @default(autoincrement())
  scheduleDraftId  String?
  scheduleDraft    ScheduleDraft?    @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  teacherId        String
  subjectId        Int
  classAssignments ClassAssignment[]

  @@unique([scheduleDraftId, teacherId, subjectId])
}

model ClassAssignment {
  id                  Int               @id @default(autoincrement())
  teacherAssignmentId Int
  teacherAssignment   TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
  classId             Int
  class               Class             @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([teacherAssignmentId, classId])
}

// Chatroom Models
model ChatroomSession {
  id           String               @id @default(cuid())
  title        String
  description  String?
  type         String // "class" or "meeting"
  hostId       String
  host         User                 @relation(fields: [hostId], references: [id])
  classId      Int?
  startTime    DateTime             @default(now())
  endTime      DateTime?
  status       String               @default("ACTIVE") // ACTIVE, ENDED
  participants SessionParticipant[]
  messages     ChatroomMessage[]
  polls        Poll[]
  quizzes      Quiz[]
}

model SessionParticipant {
  id                  String          @id @default(cuid())
  userId              String
  user                User            @relation(fields: [userId], references: [id])
  chatroomSessionId   String
  chatroomSession     ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  joinedAt            DateTime        @default(now())
  leftAt              DateTime?
  points              Int             @default(0)

  @@unique([userId, chatroomSessionId])
}

model ChatroomMessage {
  id                String          @id @default(cuid())
  content           String
  authorId          String
  author            User            @relation(fields: [authorId], references: [id])
  chatroomSessionId String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  createdAt         DateTime        @default(now())
}

model Poll {
  id                String          @id @default(cuid())
  question          String
  isActive          Boolean         @default(true)
  chatroomSessionId String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  options           PollOption[]
  createdAt         DateTime        @default(now())
}

model PollOption {
  id     String @id @default(cuid())
  text   String
  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id])
  votes  Vote[]
}

model Vote {
  id           String     @id @default(cuid())
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  voterId      String
  // No direct relation to User to allow for anonymous voting if needed
}

model Quiz {
  id                   String          @id @default(cuid())
  title                String
  isActive             Boolean         @default(true)
  currentQuestionIndex Int             @default(0)
  chatroomSessionId    String
  chatroomSession      ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  questions            QuizQuestion[]
  answers              QuizAnswer[]
  createdAt            DateTime        @default(now())
}

model QuizQuestion {
  id            String @id @default(cuid())
  question      String
  options       String[]
  correctAnswer Int
  timeLimit     Int    @default(30) // in seconds
  quizId        String
  quiz          Quiz   @relation(fields: [quizId], references: [id])
  answers       QuizAnswer[]
}

model QuizAnswer {
  id              String       @id @default(cuid())
  quizQuestionId  String
  quizQuestion    QuizQuestion @relation(fields: [quizQuestionId], references: [id])
  studentId       String
  selectedOption  Int
  isCorrect       Boolean
  answeredAt      DateTime     @default(now())
  quizId          String
  quiz            Quiz         @relation(fields: [quizId], references: [id])
}

// Enums
enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  AM
  PM
  ANY
}
