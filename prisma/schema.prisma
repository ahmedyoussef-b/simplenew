// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  firstName             String?
  lastName              String?
  email                 String    @unique
  username              String    @unique
  password              String?
  img                   String?
  role                  Role      @default(VISITOR)
  active                Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  twoFactorEnabled      Boolean?  @default(false)
  twoFactorCode         String?
  twoFactorCodeExpires  DateTime?
  passwordResetToken    String?   @unique
  passwordResetExpires  DateTime?

  // Relations
  admin     Admin?
  teacher   Teacher?
  student   Student?
  parent    Parent?
  sessions  ChatroomSession[]
  messages  ChatroomMessage[]
  drafts    ScheduleDraft[]

  @@map("users")
}

model School {
  id              Int      @id @default(autoincrement())
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  scheduleDrafts  Json[]

  @@map("schools")
}

model Grade {
  id      Int       @id @default(autoincrement())
  level   Int       @unique
  classes Class[]
  Student Student[]
  drafts  ScheduleDraft[]

  @@map("grades")
}

model Class {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  abbreviation   String?
  capacity       Int
  gradeId        Int
  grade          Grade           @relation(fields: [gradeId], references: [id])
  supervisorId   String?
  supervisor     Teacher?        @relation("Supervisor", fields: [supervisorId], references: [id], onDelete: SetNull)
  students       Student[]
  lessons        Lesson[]
  events         Event[]
  announcements  Announcement[]
  teacherAssignments TeacherAssignment[] @relation("ClassTeacherAssignments")
  drafts         ScheduleDraft[]

  @@map("classes")
}

model Subject {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  weeklyHours    Int?
  coefficient    Float?
  teachers       Teacher[]       @relation("TeacherSubjects")
  lessons        Lesson[]
  requirements   LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]
  drafts         ScheduleDraft[]

  @@map("subjects")
}

model Teacher {
  id            String          @id @default(cuid())
  userId        String          @unique
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  surname       String
  phone         String?
  address       String?
  img           String?
  bloodType     String?
  birthday      DateTime?
  sex           UserSex?
  subjects      Subject[]       @relation("TeacherSubjects")
  supervisedClasses Class[]         @relation("Supervisor")
  lessons       Lesson[]
  constraints   TeacherConstraint[]
  assignments   TeacherAssignment[]
  drafts        ScheduleDraft[]

  @@map("teachers")
}

model Classroom {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  abbreviation String?
  capacity     Int
  building     String?
  lessons      Lesson[]
  subjectRequirements SubjectRequirement[]
  drafts       ScheduleDraft[]

  @@map("classrooms")
}

model Student {
  id         String     @id @default(cuid())
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  surname    String
  phone      String?
  address    String?
  img        String?
  bloodType  String?
  birthday   DateTime?
  sex        UserSex?
  classId    Int?
  class      Class?     @relation(fields: [classId], references: [id])
  gradeId    Int?
  grade      Grade?     @relation(fields: [gradeId], references: [id])
  parentId   String?
  parent     Parent?    @relation(fields: [parentId], references: [id])
  attendances Attendance[]
  results    Result[]

  @@map("students")
}

model Parent {
  id       String    @id @default(cuid())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name     String
  surname  String
  phone    String?
  address  String?
  img      String?
  students Student[]

  @@map("parents")
}

model Admin {
  id      String @id @default(cuid())
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String
  surname String
  phone   String?

  @@map("admins")
}

model Lesson {
  id            Int         @id @default(autoincrement())
  name          String
  day           Day
  startTime     DateTime    @db.Time
  endTime       DateTime    @db.Time
  subjectId     Int
  subject       Subject     @relation(fields: [subjectId], references: [id])
  classId       Int
  class         Class       @relation(fields: [classId], references: [id])
  teacherId     String
  teacher       Teacher     @relation(fields: [teacherId], references: [id])
  classroomId   Int?
  classroom     Classroom?  @relation(fields: [classroomId], references: [id])
  exams         Exam[]
  assignments   Assignment[]
  attendances   Attendance[]
  scheduleDraftId String?
  scheduleDraft ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("lessons")
}

model Exam {
  id        Int       @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  results   Result[]

  @@map("exams")
}

model Assignment {
  id        Int       @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  results   Result[]

  @@map("assignments")
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("results")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attendances")
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])

  @@map("announcements")
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?    @relation(fields: [classId], references: [id])

  @@map("events")
}

model ChatroomSession {
  id           String             @id @default(cuid())
  hostId       String
  host         User               @relation(fields: [hostId], references: [id])
  title        String
  description  String?
  classId      Int?
  startTime    DateTime           @default(now())
  endTime      DateTime?
  status       String             @default("ACTIVE") // ACTIVE, ENDED
  type         String             @default("class") // class, meeting
  messages     ChatroomMessage[]
  participants SessionParticipant[]

  @@map("chatroom_sessions")
}

model SessionParticipant {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  chatroomSessionId String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  joinedAt          DateTime        @default(now())

  @@unique([userId, chatroomSessionId])
  @@map("session_participants")
}

model ChatroomMessage {
  id                String          @id @default(cuid())
  content           String
  authorId          String
  author            User            @relation(fields: [authorId], references: [id])
  chatroomSessionId String
  chatroomSession   ChatroomSession @relation(fields: [chatroomSessionId], references: [id])
  createdAt         DateTime        @default(now())

  @@map("chatroom_messages")
}

// --- NEW SCHEDULER DRAFT MODELS ---

model ScheduleDraft {
  id                 String               @id @default(cuid())
  name               String               @unique
  description        String?
  userId             String
  user               User                 @relation(fields: [userId], references: [id])
  isActive           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Storing snapshots as JSON
  schoolConfig       Json?
  grades             Grade[]
  classes            Class[]
  subjects           Subject[]
  teachers           Teacher[]
  classrooms         Classroom[]

  // Relations for structured data
  lessons            Lesson[]
  lessonRequirements LessonRequirement[]
  teacherConstraints TeacherConstraint[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]

  @@map("schedule_drafts")
}


model LessonRequirement {
  id              Int            @id @default(autoincrement())
  classId         Int
  subjectId       Int
  subject         Subject        @relation(fields: [subjectId], references: [id])
  hours           Int
  scheduleDraftId String
  scheduleDraft   ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  
  @@unique([scheduleDraftId, classId, subjectId])
  @@map("lesson_requirements")
}

model TeacherConstraint {
  id              Int            @id @default(autoincrement())
  teacherId       String
  teacher         Teacher        @relation(fields: [teacherId], references: [id])
  day             Day
  startTime       String
  endTime         String
  description     String?
  scheduleDraftId String
  scheduleDraft   ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  
  @@map("teacher_constraints")
}

model SubjectRequirement {
  id               Int             @id @default(autoincrement())
  subjectId        Int
  subject          Subject         @relation(fields: [subjectId], references: [id])
  allowedRoomIds   Json?           // Array of classroom IDs
  requiredRoomId   Int?
  classroom        Classroom?      @relation(fields: [requiredRoomId], references: [id], onDelete: SetNull)
  timePreference   TimePreference
  scheduleDraftId  String
  scheduleDraft    ScheduleDraft   @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  
  @@unique([scheduleDraftId, subjectId])
  @@map("subject_requirements")
}

model TeacherAssignment {
  id               Int            @id @default(autoincrement())
  teacherId        String
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
  subjectId        Int
  subject          Subject        @relation(fields: [subjectId], references: [id])
  scheduleDraftId  String
  scheduleDraft    ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  classAssignments ClassAssignment[]

  @@unique([scheduleDraftId, teacherId, subjectId])
  @@map("teacher_assignments")
}

model ClassAssignment {
  id                 Int              @id @default(autoincrement())
  teacherAssignmentId Int
  teacherAssignment  TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
  classId            Int
  class              Class            @relation(fields: [classId], references: [id])

  @@unique([teacherAssignmentId, classId])
  @@map("class_assignments")
}


// Enums
enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  AM
  PM
  ANY
}
