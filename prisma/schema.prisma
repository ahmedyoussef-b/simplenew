// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id   Int    @id @default(autoincrement())
  name String
}

model Grade {
  id      Int       @id @default(autoincrement())
  level   Int       @unique
  classes Class[]
  Student Student[]
}

model Subject {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  weeklyHours        Int
  coefficient        Int
  teachers           Teacher[]            @relation("SubjectTeachers")
  lessons            Lesson[]
  lessonRequirements LessonRequirement[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments TeacherAssignment[]
}

model Class {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  abbreviation       String?
  capacity           Int
  gradeId            Int
  grade              Grade               @relation(fields: [gradeId], references: [id])
  students           Student[]
  lessons            Lesson[]
  events             Event[]
  announcements      Announcement[]
  classAssignments   ClassAssignment[]
}

model Teacher {
  id                 String               @id @default(uuid())
  name               String
  surname            String
  phone              String?
  address            String?
  img                String?
  sex                UserSex?
  birthday           DateTime?
  bloodType          String?
  userId             String               @unique
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjects           Subject[]            @relation("SubjectTeachers")
  lessons            Lesson[]
  teacherConstraints TeacherConstraint[]
  teacherAssignments TeacherAssignment[]
}

model Student {
  id          String       @id @default(uuid())
  name        String
  surname     String
  phone       String?
  address     String?
  img         String?
  birthday    DateTime?
  sex         UserSex?
  bloodType   String?
  classId     Int?
  gradeId     Int?
  parentId    String?
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  class       Class?       @relation(fields: [classId], references: [id])
  grade       Grade?       @relation(fields: [gradeId], references: [id])
  parent      Parent?      @relation(fields: [parentId], references: [id])
  attendances Attendance[]
  results     Result[]
}

model Parent {
  id       String    @id @default(uuid())
  name     String
  surname  String
  phone    String?
  address  String?
  img      String?
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]
}

model Admin {
  id      String  @id @default(uuid())
  name    String
  surname String
  phone   String?
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lesson {
  id              Int          @id @default(autoincrement())
  name            String
  day             Day
  startTime       DateTime
  endTime         DateTime
  subjectId       Int
  classId         Int
  teacherId       String
  classroomId     Int?
  scheduleDraftId String?
  scheduleDraft   ScheduleDraft? @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  subject         Subject      @relation(fields: [subjectId], references: [id])
  class           Class        @relation(fields: [classId], references: [id])
  teacher         Teacher      @relation(fields: [teacherId], references: [id])
  classroom       Classroom?   @relation(fields: [classroomId], references: [id])
  exams           Exam[]
  assignments     Assignment[]
  attendances     Attendance[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  studentId    String
  examId       Int?
  assignmentId Int?
  student      Student     @relation(fields: [studentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int
  student   Student  @relation(fields: [studentId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Classroom {
  id           Int      @id @default(autoincrement())
  name         String
  abbreviation String?
  capacity     Int
  building     String?
  lessons      Lesson[]
  subjectRequirements SubjectRequirement[]
}

model User {
  id                      String                 @id @default(uuid())
  username                String                 @unique
  name                    String?
  firstName               String?
  lastName                String?
  email                   String                 @unique
  password                String?
  img                     String?
  role                    Role
  active                  Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  twoFactorEnabled        Boolean?               @default(false)
  twoFactorCode           String?
  twoFactorCodeExpires    DateTime?
  admin                   Admin?
  teacher                 Teacher?
  student                 Student?
  parent                  Parent?
  chatroomSessionsHosted  ChatroomSession[]
  chatroomMessages        ChatroomMessage[]
  sessionParticipation    SessionParticipant[] // Added relation
}

model ScheduleDraft {
  id                  String               @id @default(uuid())
  name                String               @unique
  description         String?
  isActive            Boolean              @default(false)
  userId              String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  schoolConfig        Json?
  classes             Json?
  subjects            Json?
  teachers            Json?
  classrooms          Json?
  grades              Json?
  lessons             Lesson[]
  lessonRequirements  LessonRequirement[]
  teacherConstraints  TeacherConstraint[]
  subjectRequirements SubjectRequirement[]
  teacherAssignments  TeacherAssignment[]
}

model LessonRequirement {
  id              Int            @id @default(autoincrement())
  classId         Int
  subjectId       Int
  hours           Int
  scheduleDraftId String
  scheduleDraft   ScheduleDraft  @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  subject         Subject        @relation(fields: [subjectId], references: [id])
}

model TeacherConstraint {
  id              Int           @id @default(autoincrement())
  day             Day
  startTime       String
  endTime         String
  description     String?
  teacherId       String
  scheduleDraftId String
  teacher         Teacher       @relation(fields: [teacherId], references: [id])
  scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
}

model SubjectRequirement {
  id              Int           @id @default(autoincrement())
  subjectId       Int
  requiredRoomId  Int?
  allowedRoomIds  Int[]
  timePreference  TimePreference
  scheduleDraftId String
  scheduleDraft   ScheduleDraft @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  subject         Subject       @relation(fields: [subjectId], references: [id])
  classroom       Classroom?    @relation(fields: [requiredRoomId], references: [id])
}

model TeacherAssignment {
  id                 String            @id @default(uuid())
  teacherId          String
  subjectId          Int
  scheduleDraftId    String
  teacher            Teacher           @relation(fields: [teacherId], references: [id])
  subject            Subject           @relation(fields: [subjectId], references: [id])
  scheduleDraft      ScheduleDraft     @relation(fields: [scheduleDraftId], references: [id], onDelete: Cascade)
  classAssignments   ClassAssignment[]
}

model ClassAssignment {
  id                  String            @id @default(uuid())
  teacherAssignmentId String
  classId             Int
  teacherAssignment   TeacherAssignment @relation(fields: [teacherAssignmentId], references: [id], onDelete: Cascade)
  class               Class             @relation(fields: [classId], references: [id])
}

model ChatroomSession {
  id           String               @id @default(uuid())
  title        String
  type         String // e.g., 'class', 'meeting'
  hostId       String
  classId      Int?
  startTime    DateTime             @default(now())
  endTime      DateTime?
  status       String               @default("ACTIVE") // e.g., 'ACTIVE', 'ENDED'
  host         User                 @relation(fields: [hostId], references: [id])
  participants SessionParticipant[]
  messages     ChatroomMessage[]
}

model SessionParticipant {
  id                String          @id @default(uuid())
  userId            String
  chatroomSessionId String
  joinedAt          DateTime        @default(now())
  leftAt            DateTime?
  user              User            @relation(fields: [userId], references: [id])
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)

  @@unique([userId, chatroomSessionId])
}

model ChatroomMessage {
  id                String          @id @default(uuid())
  content           String
  authorId          String
  chatroomSessionId String
  createdAt         DateTime        @default(now())
  author            User            @relation(fields: [authorId], references: [id])
  session           ChatroomSession @relation(fields: [chatroomSessionId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TimePreference {
  AM
  PM
  ANY
}
